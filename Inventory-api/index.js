const express = require('express');
const fs = require('fs');
const path = require('path');
const { jsPDF } = require('jspdf');
require('jspdf-autotable'); // Include the plugin
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

const downloadsDir = path.join(__dirname, 'downloads');

// Ensure "downloads" directory exists
if (!fs.existsSync(downloadsDir)) {
    fs.mkdirSync(downloadsDir);
}

app.post('/generate-pdf', async (req, res) => {
    try {
        const { vehicles, phones, batteries, userName } = req.body;

        const doc = new jsPDF();

        // Add Title
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(20);
        doc.text('Inventory Report', 10, 20);

        // Add User and Date Information
        const formattedDate = new Date().toISOString().split('T')[0]; // Format as YYYY-MM-DD
        doc.setFontSize(12);
        doc.setFont('helvetica', 'normal');
        doc.text(`Generated by: ${userName || 'Unknown User'}`, 10, 30);
        doc.text(`Date: ${formattedDate}`, 10, 37);

        // Vehicles Table
        const vehiclesStartY = 45;
        doc.setFontSize(16);
        doc.text('Vehicles', 10, vehiclesStartY);

        if (vehicles && vehicles.length > 0) {
            doc.autoTable({
                startY: vehiclesStartY + 5,
                head: [['Name', 'Key', 'ShellCard', 'Paper', 'Cable', 'Status']],
                body: vehicles.map((vehicle) => [
                    vehicle.name,
                    vehicle.key ? 'Yes' : 'No',
                    vehicle.shellCard ? 'Yes' : 'No',
                    vehicle.paper ? 'Yes' : 'No',
                    vehicle.cable ? 'Yes' : 'No',
                    vehicle.status || 'N/A',
                ]),
            });
        } else {
            doc.text('No vehicles available.', 10, vehiclesStartY + 10);
        }

        // Phones Table
        const phonesStartY = doc.lastAutoTable ? doc.lastAutoTable.finalY + 10 : vehiclesStartY + 20;
        doc.setFontSize(16);
        doc.text('Phones', 10, phonesStartY);
        if (phones && phones.length > 0) {
            doc.autoTable({
                startY: phonesStartY + 5,
                head: [['Name', 'Exists', 'Status']],
                body: phones.map((phone) => [
                    phone.name,
                    phone.exists ? 'Yes' : 'No',
                    phone.status || 'N/A',
                ]),
            });
        } else {
            doc.text('No phones available.', 10, phonesStartY + 10);
        }

        // Batteries Table
        const batteriesStartY = doc.lastAutoTable ? doc.lastAutoTable.finalY + 10 : phonesStartY + 20;
        doc.setFontSize(16);
        doc.text('Batteries', 10, batteriesStartY);
        if (batteries && batteries.length > 0) {
            doc.autoTable({
                startY: batteriesStartY + 5,
                head: [['Name', 'Exists', 'Status']],
                body: batteries.map((battery) => [
                    battery.name,
                    battery.exists ? 'Yes' : 'No',
                    battery.status || 'N/A',
                ]),
            });
        } else {
            doc.text('No batteries available.', 10, batteriesStartY + 10);
        }

        // Save PDF
        const fileName = `Inventory_${formattedDate}.pdf`;
        const pdfPath = path.join(downloadsDir, fileName);
        fs.writeFileSync(pdfPath, doc.output());

        // Send PDF to client
        res.download(pdfPath, fileName, (err) => {
            if (err) {
                console.error('Error sending PDF:', err);
                res.status(500).send('Error downloading PDF.');
            }

            // Optional: Delete file after sending
            fs.unlink(pdfPath, (unlinkErr) => {
                if (unlinkErr) {
                    console.error('Error deleting PDF file:', unlinkErr);
                }
            });
        });
    } catch (error) {
        console.error('Error generating PDF:', error);
        res.status(500).send('Error generating PDF.');
    }
});

app.post('/timecard-pdf', async (req, res) => {
    try {
        const { timeCards, employees, comments, date, userName } = req.body;

        const doc = new jsPDF();

        // Add Title
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(20);
        doc.text('TimeCard Report', 10, 20);

        // Add Generated By
        doc.setFontSize(12);
        doc.setFont('helvetica', 'normal');
        doc.text(`Generated by: ${userName || 'Unknown User'}`, 10, 30);

        // Add Date
        doc.text(`Date: ${date}`, 10, 37);
        // Add Table
        const startY = 45;
        doc.autoTable({
            startY,
            head: [['Employee', 'Start Time', 'Last Delivery', 'End Time', 'TEL', 'Battery', 'Comment']],
            body: timeCards.map((card) => {
                const employee = employees[card.employeeId];
                const fullName = employee ? `${employee.name} ${employee.familyName}` : 'Unknown';
                const comment = card.comment || 'No comment'; // Use comment from `timeCards` directly

                return [
                    fullName,
                    card.startTime || 'N/A',
                    card.lastDelivery || 'N/A',
                    card.endTime || 'N/A',
                    card.tel || 'N/A',
                    card.powerbank || 'N/A',
                    comment,
                ];
            }),
        });

        // Save PDF
        const fileName = `TimeCard_${date}.pdf`;
        const pdfPath = path.join(downloadsDir, fileName);
        fs.writeFileSync(pdfPath, doc.output());

        // Send PDF to client
        res.download(pdfPath, fileName, (err) => {
            if (err) {
                console.error('Error sending PDF:', err);
                res.status(500).send('Error downloading PDF.');
            }

            // Optional: Delete file after sending
            fs.unlink(pdfPath, (unlinkErr) => {
                if (unlinkErr) {
                    console.error('Error deleting PDF file:', unlinkErr);
                }
            });
        });
    } catch (error) {
        console.error('Error generating PDF:', error);
        res.status(500).send('Error generating PDF.');
    }
});





const PORT = 3022;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
